{"version":3,"sources":["../src/actions/GetCryptoData.ts","../src/templates/GetTheSymbol.ts","../src/Schemas/SymbolDurationSchema.ts","../src/APIS/GetTheSummaryAPI.ts","../src/index.ts"],"sourcesContent":["import {\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObject,\n    generateText,\n    HandlerCallback,\n} from \"@elizaos/core\";\nimport {\n    type Action,\n    type ActionExample,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { symbolDurationExtractionTemplate } from \"../templates/GetTheSymbol\";\nimport { GetSymbolDurationSchema } from \"../Schemas/SymbolDurationSchema\";\nimport { fetchQueryResult } from \"../APIS/GetTheSummaryAPI\";\ntype GetSymbol = z.infer<typeof GetSymbolDurationSchema> & Content;\nconst isGetSymbol = (obj: unknown): obj is GetSymbol => {\n    return GetSymbolDurationSchema.safeParse(obj).success;\n};\n\nexport const getcryptoanalysis: Action = {\n    name: \"getcryptoanalysis\",\n    similes: [\"GET_CRYPTO_ANALYSIS\",\"CRYPTO_ANALYSIS\",\"ANALYZE_L1_COINS\",\"getcryptoanalysis\"],\n    description:\n        \"Get the analysis of the L1 crypto currency\",\n\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        try {\n            let currentState = state;\n            if (!currentState) {\n                currentState = (await runtime.composeState(message)) as State;\n            } else {\n                currentState = await runtime.updateRecentMessageState(\n                    currentState\n                );\n            }\n            // console.log(\"currentState\", currentState);\n            const SymbolAndTime = composeContext({\n                state: currentState,\n                template: symbolDurationExtractionTemplate,\n            });\n            // console.log(SymbolAndTime)\n            const result = await generateObject({\n                runtime,\n                context: SymbolAndTime,\n                modelClass: ModelClass.SMALL,\n                schema: GetSymbolDurationSchema,\n            });\n            // console.log(\"result\", result);\n            // return;\n            if (!isGetSymbol(result.object)) {\n                callback(\n                    {\n                        text: `Somethig went wrong. Please try again.`,\n                    },\n                    []\n                );\n                return\n            }\n            const content = result.object;\n            console.log(\"DATA\",content);\n            if (content.symbol==undefined || content.symbol==undefined) {\n                callback(\n                    {\n                        text: `Somethig went wrong. Please try again.`,\n                    },\n                    []\n                );\n                return false;\n                \n            }\n            callback(\n                {\n                    text: `Hoping into the market to get the analysis.`,\n                },\n                []\n            );\n            const SummaryData = await fetchQueryResult(content.symbol);\n            console.log(SummaryData)\n            console.log(typeof SummaryData)\n            const llmPrompt = `\nüìä **Market Summary Report**  \n\nSummarize the following **24-hour market data** in a structured, bot-style format. The summary should:  \n- üîç **Strictly focus on available data** without assuming missing values.  \n- üîÑ **Highlight key price movements** (e.g., current price, % change, high/low).  \n- üöÄ **Be concise, engaging, and formatted for quick reading** using emojis.  \n- ‚ùå **Avoid instructions or explanations‚Äîoutput should be a clean, formatted summary.**  \n\n---\n\n\n‚ö†Ô∏è *Note: Market conditions change rapidly. Data reflects the most recent available update.*  \n\\\\\\`\\`\\`\n\n---\n\nHere is the data to summarize:  \n\n\\\\\\`\\`\\`json\n\\ ${JSON.stringify(SummaryData, null, 2)}\n\\\\\\`\\`\\`  \n\nEnsure the output is **clear, structured, and in a bot-like format** without extra explanations. üöÄ\n`;\n\n            console.log(llmPrompt)\n            const response = await generateText({\n                runtime,\n                context: llmPrompt,\n                modelClass: ModelClass.SMALL,\n            });\n            callback(\n                {\n                    text: `response - - ${response}`,\n                },\n                []\n            );\n        } \n    catch (error) {\n        callback(\n            {\n                text: error.message,\n            },\n            []\n        );\n        return;\n        }\n    },\n    examples:[\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"How's the market today?\"\n                }\n            },\n            {\n                \"user\": \"{{user2}}\",\n                \"content\": {\n                    \"action\": \"getcryptoanalysis\"\n                }\n            }\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"What's the status of BNB?\"\n                }\n            },\n            {\n                \"user\": \"{{user2}}\",\n                \"content\": {\n                    \"action\": \"getcryptoanalysis\",\n                    \n                }\n            }\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"How are L1 coins performing?\"\n                }\n            },\n            {\n                \"user\": \"{{user2}}\",\n                \"content\": {\n                    \"action\": \"getcryptoanalysis\",\n                }\n            }\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"Give me a summary of the market.\"\n                }\n            },\n            {\n                \"user\": \"{{user2}}\",\n                \"content\": {\n                    \"action\": \"getcryptoanalysis\"\n                }\n            }\n        ]\n    ] as ActionExample[][],\n} as Action;","export const symbolDurationExtractionTemplate = `\nExtract the **symbol** from the given text message.\n\n- **symbol** (string): The assets mentioned in the message.  \n  - Format the symbols as a string in the format **\"('SYMBOL1','SYMBOL2')\"**.\n  - If no specific symbol is present in the message, default to **\"('BNB','SOL','ETH')\"**.\n\nProvide the values in the following JSON format:\n\n\\\\\\json\n{\n    \"symbol\": \"('SYMBOL1','SYMBOL2')\"\n}\n\\\\\\\n\n### **Example Requests & Responses:**\n\n#### **General Market Overview Requests:**  \n##### **Example request:**  \n*\"How's the market today?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL','ETH')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"Give me a summary of the market.\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL','ETH')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"What's the overall trend in crypto today?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL','ETH')\"\n}\n\\\\\\\n\n---\n\n#### **Single Symbol Requests:**  \n##### **Example request:**  \n*\"What's the status of BNB?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"Tell me about SOL?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('SOL')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"How is ETH doing today?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('ETH')\"\n}\n\\\\\\\n\n---\n\n#### **Multiple Symbols Requests:**  \n##### **Example request:**  \n*\"What's happening with BNB and SOL?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"Check the prices for BTC, ETH, and DOGE.\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BTC','ETH','DOGE')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"Give me updates on AVAX, MATIC, and XRP.\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('AVAX','MATIC','XRP')\"\n}\n\\\\\\\n\n---\n\n#### **Category-Based Requests (e.g., L1 Coins, Meme Coins, etc.):**  \n##### **Example request:**  \n*\"How are L1 coins performing?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL','ETH')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"What's up with meme coins?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('DOGE','SHIB','PEPE')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"How are DeFi tokens doing?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('UNI','AAVE','CAKE')\"\n}\n\\\\\\\n\n---\n\n#### **Requests with Unclear Symbols (Defaulting to Preset List):**  \n##### **Example request:**  \n*\"What‚Äôs trending today?\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL','ETH')\"\n}\n\\\\\\\n\n##### **Example request:**  \n*\"Give me insights on the crypto market.\"*  \n**Example response:**  \n\\\\\\json\n{\n    \"symbol\": \"('BNB','SOL','ETH')\"\n}\n\\\\\\\n\n### **Context Handling:**  \n- If specific symbols are found in the message, extract them and format them correctly.  \n- If no specific symbols are mentioned, return the default value **\"('BNB','SOL','ETH')\"**.  \n- Consider category-based phrases (e.g., \"L1 coins,\" \"DeFi tokens\") and map them to relevant symbols.\n\nRecent user messages for context:  \n{{recentMessages}}\n\nExtract and return the symbols in the specified format. If no relevant symbols are found, return the default value.`\n;","import { z } from \"zod\";\n\nexport const GetSymbolDurationSchema = z.object({\n    symbol: z.string().refine(\n        (val) => /^\\('([A-Z]+')(,'[A-Z]+')*\\)$/.test(val),\n        {\n            message: \"Symbol should be in the format ('SYMBOL1','SYMBOL2')\",\n        }\n    ),\n    // duration: z.string().default(\"1440\").refine(\n    //     (val) => /^\\d+$/.test(val),\n    //     {\n    //         message: \"Time should be an integer in string format\",\n    //     }\n    // ),\n})","import { DuneClient, QueryParameter } from \"@duneanalytics/client-sdk\";\n\nconst DUNE_API_KEY: string = process.env.DUNE_API_KEY || \"lj0mWMA3BT9aJiKcTSi50B4hAFWKUEKP\";\nconst client = new DuneClient(DUNE_API_KEY);\n\nconst queryID: number = 4764225;\n\nexport const fetchQueryResult = async (sym: string,): Promise<any> => {\n  console.log( sym )\n  try {\n    const params = {\n      queryId: queryID,\n      query_parameters: [\n        QueryParameter.text(\"symbols\", sym),\n        QueryParameter.text(\"time\", '1440'),\n\n        // QueryParameter.number(\"NumberField\", 3.1415926535),\n        // QueryParameter.date(\"DateField\", \"2022-05-04 00:00:00\"),\n        // QueryParameter.enum(\"ListField\", \"Option 1\"),\n      ],\n    };\n\n    const executionResult = await client.runQuery(params);\n    return executionResult.result?.rows;\n  } catch (error) {\n    console.error(\"Error running query:\", error);\n  }\n};\n","import type { Plugin } from \"@elizaos/core\";\nimport { getcryptoanalysis } from \"./actions/GetCryptoData\";\n\n\nexport const dunePlugin: Plugin = {\n    name: \"dunePlugin\",\n    description: \"Agent dunePlugin with basic actions and evaluators\",\n    actions: [\n        getcryptoanalysis\n    ],\n    evaluators: [],\n    providers: [],\n};\nexport default dunePlugin;\n"],"mappings":"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","names":[]}